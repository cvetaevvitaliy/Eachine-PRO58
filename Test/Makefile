# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
include ../user_env.mk

USER_DIR = ../Src
USER_INCLUDE_DIR = ../Inc
TEST_DIR = unit
OBJECT_DIR = ../obj/test

include system-id.mk

# specify which files that are included in the test in addition to the unittest file.
# variables available:
#   <test_name>_SRC
#   <test_name>_DEFINES
filter_test_SRC := $(USER_DIR)/filter.c

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.

COMMON_FLAGS = \
	-g \
	-Wall \
	-Wextra \
	-Werror \
	-ggdb3 \
	-O0 \
	-DUNIT_TEST \
	-isystem $(GTEST_DIR)/include \
	-MMD -MP

ifeq ($(shell $(CC) -v 2>&1 | grep -q "clang version" && echo "clang"),clang)
COMMON_FLAGS += -fblocks
LDFLAGS	     += -lBlocksRuntime
endif

ifndef MACOSX
COMMON_FLAGS += -pthread
endif

# Flags passed to the C compiler.
C_FLAGS = $(COMMON_FLAGS) \
	-std=gnu99

# Flags passed to the C++ compiler.
CXX_FLAGS = $(COMMON_FLAGS) \
	-std=gnu++11

# Compiler flags for coverage instrumentation
COVERAGE_FLAGS := --coverage

C_FLAGS   += $(COVERAGE_FLAGS)
CXX_FLAGS += $(COVERAGE_FLAGS)


# Set up the parameter group linker flags according to OS
ifdef MACOSX
LDFLAGS  += -Wl,-map,$(OBJECT_DIR)/$@.map
else
LDFLAGS  += -Wl,-T,$(TEST_DIR)/parameter_group.ld -Wl,-Map,$(OBJECT_DIR)/$@.map
#LDFLAGS  += -Wl,-map,$(OBJECT_DIR)/$@.map
endif

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
# Gather up all of the tests.
TEST_SRC = $(sort $(wildcard $(TEST_DIR)/*.cc))
TESTS = $(TEST_SRC:$(TEST_DIR)/%.cc=%)
$(info $(TEST_SRC))
$(info $(TESTS))

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

## V                 : Set verbosity level based on the V= parameter
##                     V=0 Low
##                     V=1 High
include ./verbosity.mk
# House-keeping build targets.

all : $(TESTS)

clean :
	rm -rf $(OBJECT_DIR)/*

## test        : Build and run the Unit Tests (default goal)
test: $(TESTS:%=test_%)

## junittest   : Build and run the Unit Tests, producing Junit XML result files."
junittest: EXEC_OPTS = "--gtest_output=xml:$<_results.xml"
junittest: $(TESTS:%=test_%)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJECT_DIR)/gtest-all.o : $(GTEST_SRCS_)
	@echo "compiling $@" "$(STDOUT)"
	@mkdir -p $(dir $@)
	$(CXX) $(CPP_FLAGS) -I$(GTEST_DIR) $(CXX_FLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJECT_DIR)/gtest_main.o : $(GTEST_SRCS_)
	@echo "compiling $@" "$(STDOUT)"
	@mkdir -p $(dir $@)
	$(CXX) $(CPP_FLAGS) -I$(GTEST_DIR) $(CXX_FLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(OBJECT_DIR)/gtest.a : $(OBJECT_DIR)/gtest-all.o
	@echo "linking $@" "$(STDOUT)"
	$(AR) $(ARFLAGS) $@ $^

$(OBJECT_DIR)/gtest_main.a : $(OBJECT_DIR)/gtest-all.o $(OBJECT_DIR)/gtest_main.o
	@echo "linking $@" "$(STDOUT)"
	$(AR) $(ARFLAGS) $@ $^

-include $(OBJECT_DIR)/gtest-all.d \
	$(OBJECT_DIR)/gtest_main.d


# includes in test dir must override includes in user dir
TEST_INCLUDE_DIRS := $(TEST_DIR) \
	$(USER_INCLUDE_DIR)

TEST_CFLAGS	 = $(addprefix -I,$(TEST_INCLUDE_DIRS))


# canned recipe for all test builds
# param $1 = testname
define test-specific-stuff

$$1_OBJS = $$(patsubst $$(TEST_DIR)%,$$(OBJECT_DIR)/$1%, $$(patsubst $$(USER_DIR)%,$$(OBJECT_DIR)/$1%,$$($1_SRC:=.o)))

 $$(info $1 -v-v-------)
 $$(info $1_SRC:  $($1_SRC))
 $$(info $1_OBJS: $$($$1_OBJS))
 $$(info $1 -^-^-------)


#include generated dependencies
-include $$($$1_OBJS:.o=.d)
-include $(OBJECT_DIR)/$1/$1.d


$(OBJECT_DIR)/$1/%.c.o: $(USER_DIR)/%.c
	@echo "compiling $$<" "$(STDOUT)"
	$(V1) mkdir -p $$(dir $$@)
	$(V1) $(CC) $(C_FLAGS) $(TEST_CFLAGS) \
                $(foreach def,$($1_DEFINES),-D $(def)) \
                -c $$< -o $$@

$(OBJECT_DIR)/$1/%.c.o: $(TEST_DIR)/%.c
	@echo "compiling test c file: $$<" "$(STDOUT)"
	$(V1) mkdir -p $$(dir $$@)
	$(V1) $(CC) $(C_FLAGS) $(TEST_CFLAGS) \
                $(foreach def,$($1_DEFINES),-D $(def)) \
                -c $$< -o $$@

$(OBJECT_DIR)/$1/$1.o: $(TEST_DIR)/$1.cc
	@echo "compiling $$<" "$(STDOUT)"
	$(V1) mkdir -p $$(dir $$@)
	$(V1) $(CXX) $(CXX_FLAGS) $(TEST_CFLAGS)  \
                 $(foreach def,$($1_DEFINES),-D $(def)) \
                 -c $$< -o $$@


$(OBJECT_DIR)/$1/$1 : $$($$1_OBJS) \
    $(OBJECT_DIR)/$1/$1.o \
	$(OBJECT_DIR)/gtest_main.a

	@echo "linking $$@" "$(STDOUT)"
	$(V1) mkdir -p $(dir $$@)
	$(V1) $(CXX) $(CXX_FLAGS) $(LDFLAGS) $$^ -o $$@

test_$1: $(OBJECT_DIR)/$1/$1
	$(V1) $$< $$(EXEC_OPTS) "$(STDOUT)" && echo "running $$@: PASS"

endef

#apply the canned recipe above to all tests
$(eval $(foreach test,$(TESTS),$(call test-specific-stuff,$(test))))

